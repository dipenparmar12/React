{"version":3,"sources":["Practice/TicTacTok/Square.jsx","Practice/TicTacTok/Board.jsx","Practice/TicTacTok/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","className","onClick","this","props","squareBtn","squareBtnValue","Component","Board","index","e","boardProps_onClick","rendorSquare","status","moves","Game","state","history","squares","Array","fill","stepNumber","xIsNext","i","slice","length","calculateWinner","setState","concat","current","winner","map","step","desc","console","log","key","junpTo","handleClick","winLines","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.260edd41.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Square extends Component {\n  render() {\n    return (\n      <button className=\"square\" onClick={this.props.squareBtn}>\n        {this.props.squareBtnValue}\n      </button>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Square from './Square';\n\nexport default class Board extends Component {\n  rendorSquare(index) {\n    return (\n      <Square\n        squareBtnValue={this.props.squareBtnValue[index]}\n        squareBtn={(e) => {\n          this.props.boardProps_onClick(index);\n        }}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"border-row\">\n          {this.rendorSquare(0)}\n          {this.rendorSquare(1)}\n          {this.rendorSquare(2)}\n        </div>\n        <div className=\"border-row\">\n          {this.rendorSquare(3)}\n          {this.rendorSquare(4)}\n          {this.rendorSquare(5)}\n        </div>\n        <div className=\"border-row\">\n          {this.rendorSquare(6)}\n          {this.rendorSquare(7)}\n          {this.rendorSquare(8)}\n        </div>\n        <h1>{this.props.status}</h1>\n        <div>{this.props.moves}</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Board from './Board';\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{ squares: Array(9).fill(null) }],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    // is someone win game or not\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{ squares: squares }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n    // console.log(this.state.history); // board squares() 9 steps, 9 boards\n  }\n\n  junpTo(stepNumber) {\n    this.setState({\n      stepNumber,\n      xIsNext: stepNumber % 2 === 0,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    //// for Retrive History with btn click\n    const moves = history.map((step, i) => {\n      const desc = i ? 'Go toMove #' + i : 'GoTo Starting Point';\n      console.log(step);\n      return (\n        <li key={i}>\n          <button onClick={() => this.junpTo(i)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div>\n          <div className=\"game-board\">\n            <Board\n              squareBtnValue={current.squares}\n              boardProps_onClick={(i) => this.handleClick(i)}\n              status={status}\n              moves={moves}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const winLines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < winLines.length; i++) {\n    const [a, b, c] = winLines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]; // WinChar = X:O\n    }\n  }\n  return null;\n}\n","import React from 'react';\nimport './App.css';\n\n// import HelloWorld from './HelloWorld/HelloWorld';\n// import ClickTic from './Practice/ClickTic';\n// import LoginControl from './Practice/LoginControl';\n// import Toggle from './Practice/Toggle';\n// import ConditionalRendering from './Practice/ConditionalRendering.jsx';\n// import SmallMethods from './Practice/SmallMethods.jsx';\n// import NameForm from './Practice/NameForm';\n// import FormSelectElement from './Practice/FormSelectElement';\n// import FormHandlingMultipleInputs from './Practice/FormHandlingMultipleInputs';\n// import TempCalc from './Practice/TempCalc';\n// import TicTacTokGame from './Practice/TicTacTok/TicTacTokGame';\nimport Game from './Practice/TicTacTok/Game';\n// import TodoApp from './Practice/TodoApp/TodoApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <h3>ReactJs</h3> */}\n      {/* <HelloWorld /> */}\n      {/* <ClickTic /> */}\n      {/* <LoginControl /> */}\n      {/* <Toggle /> */}\n      {/* <ConditionalRendering /> */}\n      {/* <SmallMethods /> */}\n      {/* <NameForm /> */}\n      {/* <FormSelectElement /> */}\n      {/* <FormHandlingMultipleInputs /> */}\n      {/* <TempCalc /> */}\n      {/* <TicTacTokGame /> */}\n      <Game />\n      {/* <TodoApp /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}